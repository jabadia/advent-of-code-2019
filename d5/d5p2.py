from collections import namedtuple

from utils.test_case import TestCase

INPUT = """
3,225,1,225,6,6,1100,1,238,225,104,0,1,191,196,224,1001,224,-85,224,4,224,1002,223,8,223,1001,224,4,224,1,223,224,223,1101,45,50,225,1102,61,82,225,101,44,39,224,101,-105,224,224,4,224,102,8,223,223,101,5,224,224,1,224,223,223,102,14,187,224,101,-784,224,224,4,224,102,8,223,223,101,7,224,224,1,224,223,223,1001,184,31,224,1001,224,-118,224,4,224,102,8,223,223,1001,224,2,224,1,223,224,223,1102,91,18,225,2,35,110,224,101,-810,224,224,4,224,102,8,223,223,101,3,224,224,1,223,224,223,1101,76,71,224,1001,224,-147,224,4,224,102,8,223,223,101,2,224,224,1,224,223,223,1101,7,16,225,1102,71,76,224,101,-5396,224,224,4,224,1002,223,8,223,101,5,224,224,1,224,223,223,1101,72,87,225,1101,56,77,225,1102,70,31,225,1102,29,15,225,1002,158,14,224,1001,224,-224,224,4,224,102,8,223,223,101,1,224,224,1,223,224,223,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,1007,226,226,224,1002,223,2,223,1006,224,329,1001,223,1,223,8,226,677,224,1002,223,2,223,1005,224,344,1001,223,1,223,107,226,677,224,1002,223,2,223,1006,224,359,1001,223,1,223,8,677,677,224,1002,223,2,223,1005,224,374,1001,223,1,223,1108,226,226,224,1002,223,2,223,1005,224,389,1001,223,1,223,7,677,226,224,1002,223,2,223,1005,224,404,101,1,223,223,7,226,226,224,102,2,223,223,1006,224,419,1001,223,1,223,1108,226,677,224,102,2,223,223,1005,224,434,1001,223,1,223,1107,226,226,224,1002,223,2,223,1006,224,449,1001,223,1,223,1007,677,677,224,102,2,223,223,1006,224,464,1001,223,1,223,107,226,226,224,1002,223,2,223,1005,224,479,101,1,223,223,1107,677,226,224,1002,223,2,223,1005,224,494,1001,223,1,223,1008,677,677,224,102,2,223,223,1005,224,509,101,1,223,223,107,677,677,224,102,2,223,223,1005,224,524,1001,223,1,223,1108,677,226,224,1002,223,2,223,1005,224,539,1001,223,1,223,7,226,677,224,102,2,223,223,1006,224,554,1001,223,1,223,8,677,226,224,1002,223,2,223,1006,224,569,101,1,223,223,108,226,226,224,1002,223,2,223,1006,224,584,1001,223,1,223,1107,226,677,224,1002,223,2,223,1006,224,599,101,1,223,223,1008,226,226,224,102,2,223,223,1005,224,614,1001,223,1,223,1007,226,677,224,1002,223,2,223,1006,224,629,1001,223,1,223,108,677,226,224,102,2,223,223,1005,224,644,101,1,223,223,1008,226,677,224,1002,223,2,223,1005,224,659,101,1,223,223,108,677,677,224,1002,223,2,223,1006,224,674,1001,223,1,223,4,223,99,226
"""

TEST_CASES = [
    # TestCase('1,9,10,3,2,3,11,0,99,30,40,50', 3500),
]

Operation = namedtuple('Operation', 'name opcode operands')

OPERATIONS = {
    op.opcode: op for op in [
        Operation('SUM', 1, 3),
        Operation('MUL', 2, 3),
        Operation('INPUT', 3, 1),
        Operation('OUTPUT', 4, 1),
        Operation('JUMP-IF-TRUE', 5, 2),
        Operation('JUMP-IF-FALSE', 6, 2),
        Operation('LESS-THAN', 7, 3),
        Operation('EQUALS', 8, 3),
    ]}

POSITION_MODE = '0'
IMMEDIATE_MODE = '1'


def solve(input, test=True):
    memory = list(map(int, input.strip().split(',')))
    # if not test:
    #     memory[1] = 12
    #     memory[2] = 2
    pc = 0
    while memory[pc] != 99:
        opcode = str(memory[pc])
        operation = OPERATIONS[int(opcode[-2:])]
        parameter_modes = opcode[:-2][::-1].ljust(operation.operands, '0')
        operands = [
            (memory[pos] if parameter_mode == POSITION_MODE else pos)
            for parameter_mode, pos
            in zip(parameter_modes, memory[pc+1:pc+1+operation.operands])
        ]
        if operation.name == 'SUM':
            res = operands[0] + operands[1]
            memory[memory[pc + 3]] = res
        elif operation.name == 'MUL':
            res = operands[0] * operands[1]
            memory[memory[pc + 3]] = res
        elif operation.name == 'INPUT':
            memory[memory[pc + 1]] = 5
        elif operation.name == 'OUTPUT':
            if memory[pc+2] == 99:
                print('OUTPUT', operands[0])
                break
            assert operands[0] == 0
        elif operation.name == 'JUMP-IF-TRUE':
            if operands[0]:
                pc = operands[1]
                continue
        elif operation.name == 'JUMP-IF-FALSE':
            if not operands[0]:
                pc = operands[1]
                continue
        elif operation.name == 'LESS-THAN':
            memory[memory[pc + 3]] = 1 if operands[0] < operands[1] else 0
        elif operation.name == 'EQUALS':
            memory[memory[pc + 3]] = 1 if operands[0] == operands[1] else 0
        pc = pc + 1 + operation.operands
    return memory[0]


if __name__ == '__main__':
    for case in TEST_CASES:
        result = solve(case.case)
        case.check(result)

    print(solve(INPUT, test=False))
